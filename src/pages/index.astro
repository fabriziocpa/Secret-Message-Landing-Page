---
// Clean orientation detector with ultrasound corruption effects
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Signal Detector</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: 'Arial', sans-serif;
      background: #000000;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      overflow: hidden;
    }

    .main-container {
      position: relative;
      width: 100vw;
      height: 100vh;
    }

    .hello-text {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 3.5rem;
      font-weight: bold;
      color: white;
      z-index: 20;
      letter-spacing: 3px;
      opacity: 0;
      transition: opacity 0.5s ease;
      text-align: center;
      line-height: 1.2;
      font-family: 'Courier New', monospace;
    }

    .hello-text.visible {
      opacity: 1;
    }

    .hello-text.aligning {
      opacity: 1;
      animation: signal-alignment 1.5s ease-out;
    }

    @keyframes signal-alignment {
      0% {
        transform: translate(-50%, -50%) scale(0.8);
        filter: blur(5px) contrast(300%) brightness(150%);
        opacity: 0.3;
      }
      25% {
        transform: translate(-50%, -50%) scale(0.9) translate(10px, 0);
        filter: blur(3px) contrast(200%) brightness(120%);
        opacity: 0.6;
      }
      50% {
        transform: translate(-50%, -50%) scale(1.05) translate(-5px, 0);
        filter: blur(2px) contrast(150%) brightness(110%);
        opacity: 0.8;
      }
      75% {
        transform: translate(-50%, -50%) scale(1.02) translate(2px, 0);
        filter: blur(1px) contrast(120%) brightness(105%);
        opacity: 0.9;
      }
      100% {
        transform: translate(-50%, -50%) scale(1);
        filter: blur(0px) contrast(100%) brightness(100%);
        opacity: 1;
      }
    }

    .signal-prompt {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      z-index: 30;
      font-family: 'Courier New', monospace;
    }

    .signal-text {
      font-size: 2rem;
      color: #00ff41;
      text-shadow: 0 0 10px #00ff41;
      margin-bottom: 2rem;
      letter-spacing: 2px;
      animation: signal-glow 2s ease-in-out infinite alternate;
    }

    .connect-button {
      background: transparent;
      border: 2px solid #00ff41;
      color: #00ff41;
      padding: 1rem 2rem;
      font-size: 1.2rem;
      font-family: 'Courier New', monospace;
      cursor: pointer;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: all 0.3s ease;
      box-shadow: 0 0 20px rgba(0, 255, 65, 0.3);
    }

    .connect-button:hover {
      background: #00ff41;
      color: #000;
      box-shadow: 0 0 30px #00ff41;
    }

    @keyframes signal-glow {
      from { text-shadow: 0 0 10px #00ff41, 0 0 20px #00ff41; }
      to { text-shadow: 0 0 20px #00ff41, 0 0 30px #00ff41, 0 0 40px #00ff41; }
    }

    /* Ultrasound corruption effect - UNBEARABLE */
    .hello-text.glitch {
      animation: 
        ultrasound-corruption 0.015s infinite,
        chaotic-shake 0.008s infinite,
        text-dissolve 0.025s infinite;
    }

    /* Subtle signal interference even when aligned */
    .hello-text.signal-clear {
      animation: 
        subtle-interference 0.3s infinite,
        minor-drift 0.8s infinite;
    }

    /* Progressive corruption levels based on distance */
    .hello-text.corruption-light {
      animation: 
        light-corruption 0.08s infinite,
        minor-shake 0.15s infinite;
    }

    .hello-text.corruption-medium {
      animation: 
        medium-corruption 0.05s infinite,
        moderate-shake 0.1s infinite,
        partial-dissolve 0.12s infinite;
    }

    .hello-text.corruption-heavy {
      animation: 
        heavy-corruption 0.03s infinite,
        heavy-shake 0.06s infinite,
        strong-dissolve 0.08s infinite;
    }

    @keyframes ultrasound-corruption {
      0% { 
        transform: translate(-50%, -50%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        filter: none;
      }
      2% { 
        transform: translate(-50%, -50%) translate(15px, 0) scaleX(0.8) scaleY(1.1);
        clip-path: polygon(0% 8%, 95% 2%, 100% 18%, 5% 22%);
        filter: blur(1px) contrast(200%);
      }
      4% { 
        transform: translate(-50%, -50%) translate(-25px, 0) scaleX(1.3) scaleY(0.7);
        clip-path: polygon(10% 22%, 90% 12%, 98% 35%, 2% 38%);
        filter: blur(2px) brightness(150%) saturate(200%);
      }
      6% { 
        transform: translate(-50%, -50%) translate(35px, 0) scaleX(0.6) scaleY(1.4);
        clip-path: polygon(5% 38%, 85% 28%, 95% 52%, 0% 58%);
        filter: blur(3px) hue-rotate(180deg) invert(0.2);
      }
      8% { 
        transform: translate(-50%, -50%) translate(-45px, 0) scaleX(1.5) scaleY(0.5);
        clip-path: polygon(15% 58%, 80% 45%, 100% 68%, 8% 75%);
        filter: blur(4px) contrast(300%) grayscale(0.5);
      }
      10% { 
        transform: translate(-50%, -50%) translate(50px, 0) scaleX(0.4) scaleY(1.6);
        clip-path: polygon(0% 75%, 75% 62%, 90% 85%, 3% 92%);
        filter: blur(5px) sepia(0.8) brightness(80%);
      }
      12% { 
        transform: translate(-50%, -50%) translate(-38px, 0) scaleX(1.4) scaleY(0.6);
        clip-path: polygon(12% 92%, 88% 78%, 100% 100%, 0% 100%);
        filter: blur(4.5px) saturate(300%) hue-rotate(-90deg);
      }
      14% { 
        transform: translate(-50%, -50%) translate(42px, 0) scaleX(0.7) scaleY(1.3);
        clip-path: polygon(8% 0%, 92% 8%, 85% 28%, 15% 35%);
        filter: blur(3.5px) contrast(250%) invert(0.3);
      }
      16% { 
        transform: translate(-50%, -50%) translate(-52px, 0) scaleX(1.6) scaleY(0.4);
        clip-path: polygon(20% 35%, 78% 22%, 95% 48%, 5% 55%);
        filter: blur(5.5px) brightness(120%) grayscale(0.7);
      }
      18% { 
        transform: translate(-50%, -50%) translate(32px, 0) scaleX(0.9) scaleY(1.2);
        clip-path: polygon(2% 55%, 88% 42%, 100% 65%, 12% 72%);
        filter: blur(2.5px) sepia(0.6) saturate(250%);
      }
      20% { 
        transform: translate(-50%, -50%) translate(-28px, 0) scaleX(1.2) scaleY(0.8);
        clip-path: polygon(18% 72%, 82% 58%, 90% 82%, 10% 88%);
        filter: blur(3.8px) hue-rotate(90deg) contrast(180%);
      }
      22% { 
        transform: translate(-50%, -50%) translate(48px, 0) scaleX(0.5) scaleY(1.5);
        clip-path: polygon(5% 88%, 95% 75%, 100% 95%, 0% 100%);
        filter: blur(6px) invert(0.4) brightness(90%);
      }
      24% { 
        transform: translate(-50%, -50%) translate(-35px, 0) scaleX(1.3) scaleY(0.7);
        clip-path: polygon(25% 0%, 75% 15%, 80% 35%, 20% 40%);
        filter: blur(4.2px) saturate(400%) grayscale(0.3);
      }
      26% { 
        transform: translate(-50%, -50%) translate(28px, 0) scaleX(0.85) scaleY(1.15);
        clip-path: polygon(8% 40%, 92% 28%, 88% 55%, 12% 62%);
        filter: blur(2.8px) contrast(220%) sepia(0.4);
      }
      28% { 
        transform: translate(-50%, -50%) translate(-40px, 0) scaleX(1.45) scaleY(0.55);
        clip-path: polygon(15% 62%, 85% 48%, 95% 75%, 5% 82%);
        filter: blur(5.2px) hue-rotate(-45deg) brightness(110%);
      }
      30% { 
        transform: translate(-50%, -50%) translate(55px, 0) scaleX(0.35) scaleY(1.65);
        clip-path: polygon(0% 82%, 100% 68%, 85% 92%, 15% 98%);
        filter: blur(6.5px) invert(0.5) saturate(150%);
      }
      32% { 
        transform: translate(-50%, -50%) translate(-22px, 0) scaleX(1.1) scaleY(0.9);
        clip-path: polygon(22% 0%, 78% 12%, 88% 32%, 12% 38%);
        filter: blur(3.2px) contrast(190%) grayscale(0.6);
      }
      /* Continue with more erratic frames... */
      50% { 
        transform: translate(-50%, -50%) translate(-60px, 0) scaleX(1.7) scaleY(0.3);
        clip-path: polygon(30% 45%, 70% 35%, 100% 58%, 0% 65%);
        filter: blur(7px) sepia(1) brightness(70%) saturate(500%);
      }
      75% { 
        transform: translate(-50%, -50%) translate(45px, 0) scaleX(0.2) scaleY(1.8);
        clip-path: polygon(5% 78%, 95% 68%, 90% 88%, 10% 95%);
        filter: blur(8px) invert(0.7) hue-rotate(270deg);
      }
      90% { 
        transform: translate(-50%, -50%) translate(-18px, 0) scaleX(1.05) scaleY(0.95);
        clip-path: polygon(8% 92%, 92% 88%, 88% 100%, 12% 100%);
        filter: blur(1.5px) contrast(160%) brightness(130%);
      }
      100% { 
        transform: translate(-50%, -50%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        filter: none;
      }
    }

    @keyframes chaotic-shake {
      0% { transform: translate(-50%, -50%) translate(0, 0) rotate(0deg); }
      10% { transform: translate(-50%, -50%) translate(-8px, 3px) rotate(-2deg) scaleX(0.9); }
      20% { transform: translate(-50%, -50%) translate(12px, -5px) rotate(3deg) scaleY(0.85); }
      30% { transform: translate(-50%, -50%) translate(-15px, 8px) rotate(-4deg) scaleX(1.15); }
      40% { transform: translate(-50%, -50%) translate(20px, -12px) rotate(5deg) scaleY(1.2); }
      50% { transform: translate(-50%, -50%) translate(-25px, 15px) rotate(-6deg) scaleX(0.75); }
      60% { transform: translate(-50%, -50%) translate(30px, -18px) rotate(7deg) scaleY(0.6); }
      70% { transform: translate(-50%, -50%) translate(-35px, 22px) rotate(-8deg) scaleX(1.4); }
      80% { transform: translate(-50%, -50%) translate(40px, -25px) rotate(9deg) scaleY(1.6); }
      90% { transform: translate(-50%, -50%) translate(-20px, 10px) rotate(-3deg) scaleX(0.8); }
      100% { transform: translate(-50%, -50%) translate(0, 0) rotate(0deg); }
    }

    @keyframes text-dissolve {
      0% { opacity: 1; }
      5% { opacity: 0.2; }
      10% { opacity: 0.8; }
      15% { opacity: 0.1; }
      20% { opacity: 0.9; }
      25% { opacity: 0.05; }
      30% { opacity: 0.7; }
      35% { opacity: 0.15; }
      40% { opacity: 0.95; }
      45% { opacity: 0.02; }
      50% { opacity: 0.6; }
      55% { opacity: 0.25; }
      60% { opacity: 0.85; }
      65% { opacity: 0.08; }
      70% { opacity: 0.75; }
      75% { opacity: 0.12; }
      80% { opacity: 0.9; }
      85% { opacity: 0.04; }
      90% { opacity: 0.65; }
      95% { opacity: 0.18; }
      100% { opacity: 1; }
    }

    @keyframes subtle-interference {
      0% { 
        transform: translate(-50%, -50%);
        filter: none;
      }
      20% { 
        transform: translate(-50%, -50%) translate(1px, 0);
        filter: blur(0.2px) contrast(105%);
      }
      40% { 
        transform: translate(-50%, -50%) translate(-1px, 0);
        filter: blur(0.1px) brightness(102%);
      }
      60% { 
        transform: translate(-50%, -50%) translate(0.5px, 0);
        filter: contrast(103%) saturate(105%);
      }
      80% { 
        transform: translate(-50%, -50%) translate(-0.5px, 0);
        filter: blur(0.15px) brightness(99%);
      }
      100% { 
        transform: translate(-50%, -50%);
        filter: none;
      }
    }

    @keyframes minor-drift {
      0% { 
        opacity: 1;
      }
      15% { 
        opacity: 0.95;
      }
      30% { 
        opacity: 1;
      }
      45% { 
        opacity: 0.98;
      }
      60% { 
        opacity: 1;
      }
      75% { 
        opacity: 0.97;
      }
      90% { 
        opacity: 1;
      }
      100% { 
        opacity: 1;
      }
    }

    /* Light corruption - slight interference */
    @keyframes light-corruption {
      0% { 
        transform: translate(-50%, -50%);
        filter: none;
      }
      25% { 
        transform: translate(-50%, -50%) translate(2px, 0);
        filter: blur(0.5px) contrast(110%);
      }
      50% { 
        transform: translate(-50%, -50%) translate(-3px, 0);
        filter: blur(0.3px) brightness(105%);
      }
      75% { 
        transform: translate(-50%, -50%) translate(1px, 0);
        filter: contrast(108%) saturate(110%);
      }
      100% { 
        transform: translate(-50%, -50%);
        filter: none;
      }
    }

    @keyframes minor-shake {
      0% { transform: translate(-50%, -50%); }
      25% { transform: translate(-50%, -50%) translate(-2px, 1px) rotate(-0.5deg); }
      50% { transform: translate(-50%, -50%) translate(3px, -1px) rotate(0.8deg); }
      75% { transform: translate(-50%, -50%) translate(-1px, 2px) rotate(-0.3deg); }
      100% { transform: translate(-50%, -50%); }
    }

    /* Medium corruption - noticeable interference */
    @keyframes medium-corruption {
      0% { 
        transform: translate(-50%, -50%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        filter: none;
      }
      20% { 
        transform: translate(-50%, -50%) translate(8px, 0) scaleX(0.95);
        clip-path: polygon(0% 5%, 95% 0%, 100% 20%, 5% 15%);
        filter: blur(1px) contrast(140%) brightness(110%);
      }
      40% { 
        transform: translate(-50%, -50%) translate(-12px, 0) scaleX(1.08);
        clip-path: polygon(8% 15%, 92% 10%, 88% 35%, 12% 30%);
        filter: blur(1.5px) saturate(150%) hue-rotate(15deg);
      }
      60% { 
        transform: translate(-50%, -50%) translate(15px, 0) scaleX(0.88);
        clip-path: polygon(5% 30%, 85% 25%, 95% 50%, 10% 45%);
        filter: blur(2px) contrast(160%) brightness(90%);
      }
      80% { 
        transform: translate(-50%, -50%) translate(-8px, 0) scaleX(1.05);
        clip-path: polygon(15% 45%, 90% 40%, 85% 70%, 20% 65%);
        filter: blur(1.2px) saturate(130%) hue-rotate(-10deg);
      }
      100% { 
        transform: translate(-50%, -50%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        filter: none;
      }
    }

    @keyframes moderate-shake {
      0% { transform: translate(-50%, -50%); }
      20% { transform: translate(-50%, -50%) translate(-5px, 2px) rotate(-1deg); }
      40% { transform: translate(-50%, -50%) translate(8px, -3px) rotate(1.5deg); }
      60% { transform: translate(-50%, -50%) translate(-6px, 4px) rotate(-1.2deg); }
      80% { transform: translate(-50%, -50%) translate(4px, -2px) rotate(0.8deg); }
      100% { transform: translate(-50%, -50%); }
    }

    @keyframes partial-dissolve {
      0% { opacity: 1; }
      25% { opacity: 0.7; }
      50% { opacity: 0.9; }
      75% { opacity: 0.6; }
      100% { opacity: 1; }
    }

    /* Heavy corruption - intense interference */
    @keyframes heavy-corruption {
      0% { 
        transform: translate(-50%, -50%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        filter: none;
      }
      15% { 
        transform: translate(-50%, -50%) translate(20px, 0) scaleX(0.7) scaleY(1.2);
        clip-path: polygon(0% 10%, 85% 5%, 95% 30%, 10% 25%);
        filter: blur(2px) contrast(200%) brightness(120%) hue-rotate(45deg);
      }
      30% { 
        transform: translate(-50%, -50%) translate(-25px, 0) scaleX(1.4) scaleY(0.6);
        clip-path: polygon(15% 25%, 80% 20%, 90% 45%, 5% 40%);
        filter: blur(3px) saturate(250%) invert(0.2) contrast(180%);
      }
      45% { 
        transform: translate(-50%, -50%) translate(30px, 0) scaleX(0.5) scaleY(1.5);
        clip-path: polygon(8% 40%, 75% 35%, 85% 60%, 18% 55%);
        filter: blur(4px) brightness(80%) sepia(0.5) contrast(220%);
      }
      60% { 
        transform: translate(-50%, -50%) translate(-18px, 0) scaleX(1.2) scaleY(0.8);
        clip-path: polygon(20% 55%, 88% 50%, 92% 75%, 12% 70%);
        filter: blur(2.5px) hue-rotate(-60deg) saturate(200%) brightness(110%);
      }
      75% { 
        transform: translate(-50%, -50%) translate(22px, 0) scaleX(0.8) scaleY(1.3);
        clip-path: polygon(5% 70%, 90% 65%, 95% 90%, 15% 85%);
        filter: blur(3.5px) contrast(240%) invert(0.3) grayscale(0.4);
      }
      90% { 
        transform: translate(-50%, -50%) translate(-12px, 0) scaleX(1.1) scaleY(0.9);
        clip-path: polygon(10% 85%, 85% 80%, 88% 100%, 8% 95%);
        filter: blur(2px) brightness(95%) saturate(180%) hue-rotate(20deg);
      }
      100% { 
        transform: translate(-50%, -50%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
        filter: none;
      }
    }

    @keyframes heavy-shake {
      0% { transform: translate(-50%, -50%); }
      15% { transform: translate(-50%, -50%) translate(-10px, 5px) rotate(-2deg) scale(0.95); }
      30% { transform: translate(-50%, -50%) translate(15px, -8px) rotate(3deg) scale(1.08); }
      45% { transform: translate(-50%, -50%) translate(-12px, 10px) rotate(-2.5deg) scale(0.92); }
      60% { transform: translate(-50%, -50%) translate(18px, -6px) rotate(2.8deg) scale(1.05); }
      75% { transform: translate(-50%, -50%) translate(-8px, 8px) rotate(-1.5deg) scale(0.98); }
      90% { transform: translate(-50%, -50%) translate(6px, -4px) rotate(1deg) scale(1.02); }
      100% { transform: translate(-50%, -50%); }
    }

    @keyframes strong-dissolve {
      0% { opacity: 1; }
      20% { opacity: 0.4; }
      40% { opacity: 0.8; }
      60% { opacity: 0.2; }
      80% { opacity: 0.9; }
      100% { opacity: 1; }
    }

    /* Ultrasound wave interference */
    .screen-interference {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: 
        repeating-linear-gradient(
          0deg,
          transparent 0px,
          rgba(255,255,255,0.03) 0.5px,
          transparent 1px,
          rgba(255,255,255,0.08) 1.5px,
          transparent 2px,
          rgba(255,255,255,0.05) 2.5px,
          transparent 3px,
          rgba(255,255,255,0.12) 3.5px,
          transparent 4px,
          rgba(255,255,255,0.07) 4.5px,
          transparent 5px,
          transparent 8px,
          rgba(255,255,255,0.15) 8.5px,
          transparent 9px,
          transparent 12px
        );
      z-index: 1000;
      pointer-events: none;
      opacity: 0;
    }

    .screen-interference.active {
      opacity: 1;
      animation: 
        ultrasound-waves 0.01s infinite,
        screen-distort 0.007s infinite;
    }

    @keyframes screen-distort {
      0% { filter: contrast(100%) brightness(100%); }
      10% { filter: contrast(300%) brightness(50%) hue-rotate(180deg); }
      20% { filter: contrast(50%) brightness(200%) saturate(500%); }
      30% { filter: contrast(400%) brightness(25%) invert(0.5); }
      40% { filter: contrast(25%) brightness(300%) sepia(1); }
      50% { filter: contrast(500%) brightness(10%) grayscale(1); }
      60% { filter: contrast(10%) brightness(400%) hue-rotate(-90deg); }
      70% { filter: contrast(350%) brightness(30%) saturate(0); }
      80% { filter: contrast(75%) brightness(250%) invert(0.8); }
      90% { filter: contrast(450%) brightness(15%) sepia(0.7); }
      100% { filter: contrast(100%) brightness(100%); }
    }

    @keyframes ultrasound-waves {
      0% { 
        transform: translateX(0px) translateY(0px) scaleY(1) scaleX(1);
        background-position: 0px 0px;
        filter: none;
      }
      5% { 
        transform: translateX(12px) translateY(1px) scaleY(0.92) scaleX(1.05);
        background-position: 3px 1px;
        filter: blur(0.3px);
      }
      10% { 
        transform: translateX(-18px) translateY(-1px) scaleY(1.12) scaleX(0.88);
        background-position: -4px -1px;
        filter: blur(0.5px) contrast(120%);
      }
      15% { 
        transform: translateX(25px) translateY(2px) scaleY(0.78) scaleX(1.22);
        background-position: 6px 2px;
        filter: blur(0.8px) brightness(110%);
      }
      20% { 
        transform: translateX(-32px) translateY(-2px) scaleY(1.35) scaleX(0.65);
        background-position: -7px -2px;
        filter: blur(1px) saturate(150%);
      }
      25% { 
        transform: translateX(38px) translateY(3px) scaleY(0.58) scaleX(1.42);
        background-position: 9px 3px;
        filter: blur(1.2px) hue-rotate(30deg);
      }
      30% { 
        transform: translateX(-28px) translateY(-3px) scaleY(1.48) scaleX(0.52);
        background-position: -6px -3px;
        filter: blur(1.5px) contrast(140%);
      }
      35% { 
        transform: translateX(35px) translateY(2px) scaleY(0.72) scaleX(1.28);
        background-position: 8px 2px;
        filter: blur(1px) brightness(90%);
      }
      40% { 
        transform: translateX(-42px) translateY(-1px) scaleY(1.25) scaleX(0.75);
        background-position: -9px -1px;
        filter: blur(1.8px) saturate(200%);
      }
      45% { 
        transform: translateX(45px) translateY(4px) scaleY(0.45) scaleX(1.55);
        background-position: 11px 4px;
        filter: blur(2px) hue-rotate(-45deg);
      }
      50% { 
        transform: translateX(-50px) translateY(-4px) scaleY(1.68) scaleX(0.32);
        background-position: -12px -4px;
        filter: blur(2.5px) contrast(180%);
      }
      55% { 
        transform: translateX(22px) translateY(1px) scaleY(0.88) scaleX(1.12);
        background-position: 5px 1px;
        filter: blur(0.8px) brightness(120%);
      }
      60% { 
        transform: translateX(-15px) translateY(-2px) scaleY(1.18) scaleX(0.82);
        background-position: -3px -2px;
        filter: blur(1.2px) saturate(180%);
      }
      65% { 
        transform: translateX(30px) translateY(3px) scaleY(0.65) scaleX(1.35);
        background-position: 7px 3px;
        filter: blur(1.5px) hue-rotate(60deg);
      }
      70% { 
        transform: translateX(-38px) translateY(-3px) scaleY(1.42) scaleX(0.58);
        background-position: -8px -3px;
        filter: blur(2.2px) contrast(160%);
      }
      75% { 
        transform: translateX(48px) translateY(2px) scaleY(0.38) scaleX(1.62);
        background-position: 12px 2px;
        filter: blur(3px) brightness(80%);
      }
      80% { 
        transform: translateX(-25px) translateY(-1px) scaleY(1.32) scaleX(0.68);
        background-position: -6px -1px;
        filter: blur(1.8px) saturate(250%);
      }
      85% { 
        transform: translateX(20px) translateY(4px) scaleY(0.82) scaleX(1.18);
        background-position: 4px 4px;
        filter: blur(1px) hue-rotate(-90deg);
      }
      90% { 
        transform: translateX(-12px) translateY(-2px) scaleY(1.08) scaleX(0.92);
        background-position: -2px -2px;
        filter: blur(0.6px) contrast(130%);
      }
      95% { 
        transform: translateX(8px) translateY(1px) scaleY(0.98) scaleX(1.02);
        background-position: 1px 1px;
        filter: blur(0.2px) brightness(105%);
      }
      100% { 
        transform: translateX(0px) translateY(0px) scaleY(1) scaleX(1);
        background-position: 0px 0px;
        filter: none;
      }
    }

    /* Random blackout overlay */
    .blackout-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: #000000;
      z-index: 9999;
      opacity: 0;
      pointer-events: none;
    }

    .blackout-overlay.active {
      animation: random-blackouts 0.1s infinite;
    }

    @keyframes random-blackouts {
      0% { opacity: 0; }
      5% { opacity: 1; }
      8% { opacity: 0; }
      12% { opacity: 1; }
      15% { opacity: 0; }
      25% { opacity: 1; }
      27% { opacity: 0; }
      35% { opacity: 1; }
      38% { opacity: 0; }
      45% { opacity: 1; }
      48% { opacity: 0; }
      55% { opacity: 1; }
      58% { opacity: 0; }
      65% { opacity: 1; }
      67% { opacity: 0; }
      75% { opacity: 1; }
      78% { opacity: 0; }
      85% { opacity: 1; }
      87% { opacity: 0; }
      95% { opacity: 1; }
      97% { opacity: 0; }
      100% { opacity: 0; }
    }

    /* Pixelation overlay for subtle corruption */
    .pixelation-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: 
        repeating-linear-gradient(90deg, 
          rgba(255,255,255,0.1) 0px 3px, 
          rgba(255,0,0,0.15) 3px 6px, 
          rgba(0,255,0,0.15) 6px 9px, 
          rgba(0,0,255,0.15) 9px 12px, 
          transparent 12px 18px);
      z-index: 1500;
      pointer-events: none;
      opacity: 0;
      image-rendering: pixelated;
      image-rendering: -moz-crisp-edges;
      image-rendering: crisp-edges;
    }

    .pixelation-overlay.active {
      opacity: 0.3;
      animation: pixelation-drift 0.1s infinite;
    }

    @keyframes pixelation-drift {
      0% { 
        transform: translate(0px, 0px);
        filter: contrast(120%);
      }
      25% { 
        transform: translate(5px, -2px);
        filter: contrast(140%) hue-rotate(15deg);
      }
      50% { 
        transform: translate(-3px, 4px);
        filter: contrast(110%) saturate(150%);
      }
      75% { 
        transform: translate(2px, -1px);
        filter: contrast(130%) hue-rotate(-10deg);
      }
      100% { 
        transform: translate(0px, 0px);
        filter: contrast(120%);
      }
    }



    /* Horizontal glitch partitioning */
    .horizontal-glitch {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: 
        repeating-linear-gradient(0deg,
          transparent 0px 20px,
          rgba(255,255,255,0.9) 20px 25px,
          transparent 25px 45px,
          rgba(255,255,255,0.7) 45px 48px,
          transparent 48px 75px,
          rgba(255,255,255,1) 75px 82px,
          transparent 82px 120px,
          rgba(255,255,255,0.5) 120px 122px,
          transparent 122px 160px,
          rgba(255,255,255,0.8) 160px 167px,
          transparent 167px 200px);
      z-index: 1800;
      pointer-events: none;
      opacity: 0;
    }

    .horizontal-glitch.active {
      opacity: 1;
      animation: 
        partition-shift 0.12s infinite,
        section-distortion 0.09s infinite,
        partition-scale 0.15s infinite;
    }

    @keyframes partition-shift {
      0% { 
        transform: translateX(0px);
        background-position: 0px 0px;
      }
      12% { 
        transform: translateX(35px);
        background-position: 8px 3px;
      }
      25% { 
        transform: translateX(-60px);
        background-position: -15px -2px;
      }
      37% { 
        transform: translateX(80px);
        background-position: 20px 5px;
      }
      50% { 
        transform: translateX(-45px);
        background-position: -12px -4px;
      }
      62% { 
        transform: translateX(70px);
        background-position: 18px 2px;
      }
      75% { 
        transform: translateX(-85px);
        background-position: -22px -6px;
      }
      87% { 
        transform: translateX(25px);
        background-position: 6px 1px;
      }
      100% { 
        transform: translateX(0px);
        background-position: 0px 0px;
      }
    }

    @keyframes section-distortion {
      0% { 
        filter: contrast(130%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
      }
      11% { 
        filter: contrast(190%) brightness(110%);
        clip-path: polygon(0% 0%, 90% 5%, 95% 25%, 5% 20%, 0% 45%, 85% 40%, 100% 65%, 15% 60%, 0% 85%, 80% 80%, 100% 100%, 0% 100%);
      }
      22% { 
        filter: contrast(150%) brightness(90%);
        clip-path: polygon(10% 0%, 100% 8%, 85% 30%, 25% 25%, 20% 50%, 90% 45%, 75% 70%, 35% 65%, 30% 90%, 95% 85%, 90% 100%, 20% 100%);
      }
      33% { 
        filter: contrast(210%) brightness(120%);
        clip-path: polygon(5% 0%, 95% 3%, 100% 28%, 0% 32%, 15% 55%, 75% 50%, 85% 75%, 25% 78%, 10% 95%, 100% 92%, 95% 100%, 5% 100%);
      }
      44% { 
        filter: contrast(170%) brightness(80%);
        clip-path: polygon(15% 0%, 85% 12%, 90% 35%, 30% 30%, 25% 58%, 80% 53%, 100% 80%, 20% 85%, 0% 100%, 90% 95%);
      }
      55% { 
        filter: contrast(200%) brightness(105%);
        clip-path: polygon(8% 0%, 92% 6%, 88% 32%, 12% 28%, 18% 60%, 88% 55%, 82% 82%, 18% 88%, 22% 100%, 78% 95%);
      }
      66% { 
        filter: contrast(160%) brightness(95%);
        clip-path: polygon(20% 0%, 80% 15%, 75% 38%, 35% 35%, 40% 68%, 85% 63%, 90% 88%, 10% 90%, 15% 100%, 85% 98%);
      }
      77% { 
        filter: contrast(180%) brightness(115%);
        clip-path: polygon(12% 0%, 88% 9%, 82% 33%, 28% 30%, 32% 62%, 78% 58%, 85% 85%, 25% 88%, 18% 100%, 82% 97%);
      }
      88% { 
        filter: contrast(140%) brightness(85%);
        clip-path: polygon(6% 0%, 94% 4%, 90% 28%, 18% 25%, 22% 58%, 84% 55%, 88% 88%, 16% 90%, 12% 100%, 88% 98%);
      }
      100% { 
        filter: contrast(130%);
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
      }
    }

    @keyframes partition-scale {
      0% { 
        transform: scaleY(1) scaleX(1);
      }
      16% { 
        transform: scaleY(0.7) scaleX(1.4);
      }
      33% { 
        transform: scaleY(1.3) scaleX(0.6);
      }
      50% { 
        transform: scaleY(0.4) scaleX(1.8);
      }
      66% { 
        transform: scaleY(1.6) scaleX(0.3);
      }
      83% { 
        transform: scaleY(0.8) scaleX(1.2);
      }
      100% { 
        transform: scaleY(1) scaleX(1);
      }
    }

    .status {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(255,255,255,0.1);
      border: 1px solid white;
      color: white;
      padding: 0.8rem 1.5rem;
      border-radius: 8px;
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
      z-index: 100;
    }
  </style>
</head>
<body>
  <div id="screenInterference" class="screen-interference"></div>
  <div id="blackoutOverlay" class="blackout-overlay"></div>
  <div id="pixelationOverlay" class="pixelation-overlay"></div>
  <div id="horizontalGlitch" class="horizontal-glitch"></div>

  <div class="main-container">
    <div id="hello" class="hello-text">CERROS DE CAMACHO 980<br><span style="font-size: 0.4em; letter-spacing: 2px;">THIRD CONTACT INITIATED</span></div>
    
    <div id="status" class="status">
      Move to center zone
    </div>
  </div>

  <script>
    class OrientationDetector {
      constructor() {
        this.isVertical = false;
        this.helloElement = document.getElementById('hello');
        this.statusElement = document.getElementById('status');
        this.signalPrompt = document.getElementById('signal-prompt');
        this.connectButton = document.getElementById('connect-button');
        this.signalConnected = false;
        
        this.init();
      }

      async init() {
        // Check if desktop first
        const isDesktop = !this.isMobileDevice();
        
        if (isDesktop) {
          // Desktop: automatic experience, no signal prompt needed
          if (this.signalPrompt) {
            this.signalPrompt.style.display = 'none';
          }
          this.signalConnected = true;
          this.setupOrientationDetection();
        } else {
          // Mobile: show signal prompt initially, hide message
          if (this.helloElement) {
            this.helloElement.style.opacity = '0';
          }
          this.setupSignalConnection();
        }
      }

      isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               (navigator.maxTouchPoints && navigator.maxTouchPoints > 2);
      }

      setupSignalConnection() {
        if (this.connectButton) {
          this.connectButton.addEventListener('click', async () => {
            // Hide signal prompt with fade effect
            if (this.signalPrompt) {
              this.signalPrompt.style.transition = 'opacity 1s ease';
              this.signalPrompt.style.opacity = '0';
            }
            
            setTimeout(() => {
              if (this.signalPrompt) {
                this.signalPrompt.style.display = 'none';
              }
              this.signalConnected = true;
              if (this.statusElement) {
                this.statusElement.innerHTML = 'Signal connected. Calibrating...';
              }
              this.setupOrientationDetection();
            }, 1000);
          });
        }
      }

      async setupOrientationDetection() {
        // Use the same mobile detection method
        if (!this.isMobileDevice()) {
          this.setupMouseSimulation();
          return;
        }

        // Mobile device orientation setup
        if ('DeviceOrientationEvent' in window) {
          if (typeof DeviceOrientationEvent.requestPermission === 'function') {
            // iOS 13+ permission request - use alien styling
            const button = document.createElement('button');
            button.textContent = 'Grant Sensor Access';
            button.style.cssText = `
              position: fixed; top: 60%; left: 50%; transform: translate(-50%, -50%);
              background: transparent; border: 2px solid #ff4400; color: #ff4400;
              padding: 1rem 2rem; font-family: 'Courier New', monospace;
              font-size: 1.1rem; cursor: pointer; z-index: 1000;
              text-transform: uppercase; letter-spacing: 1px;
              box-shadow: 0 0 20px rgba(255, 68, 0, 0.5);
            `;
            document.body.appendChild(button);
            
            button.addEventListener('click', async () => {
              const permission = await DeviceOrientationEvent.requestPermission();
              if (permission === 'granted') {
                button.remove();
                this.startOrientationDetection();
              }
            });
          } else {
            this.startOrientationDetection();
          }
        }
      }

      startOrientationDetection() {
        window.addEventListener('deviceorientation', (event) => {
          const beta = event.beta;
          const gamma = event.gamma;
          
          // Calculate total deviation from vertical (0,0)
          const betaDeviation = beta !== null ? Math.abs(beta) : 90;
          const gammaDeviation = gamma !== null ? Math.abs(gamma) : 90;
          const totalDeviation = betaDeviation + gammaDeviation;
          
          // Store current deviation for corruption calculation
          this.currentOrientationDeviation = totalDeviation;
          
          const tolerance = 15;
          const isBetaVertical = beta !== null && Math.abs(beta) < tolerance;
          const isGammaVertical = gamma !== null && Math.abs(gamma) < tolerance;
          
          const wasVertical = this.isVertical;
          this.isVertical = isBetaVertical && isGammaVertical;

          // Update UI on deviation change (not just zone change)
          if (this.isVertical !== wasVertical || Math.abs(this.lastDeviation - totalDeviation) > 5) {
            this.lastDeviation = totalDeviation;
            this.updateUI();
          }
        });
        
        this.statusElement.innerHTML = 'Signal active. Align to receive transmission.';
        // Initialize deviation tracking
        this.currentOrientationDeviation = 90; // Start with high deviation
        this.lastDeviation = 90;
        // Show the message now that orientation detection is active
        this.updateUI();
      }

      setupMouseSimulation() {
        document.addEventListener('mousemove', (event) => {
          const mouseX = event.clientX;
          const mouseY = event.clientY;
          
          const centerX = window.innerWidth / 2;
          const centerY = window.innerHeight / 2;
          
          const distanceFromCenter = Math.sqrt(
            Math.pow(mouseX - centerX, 2) + Math.pow(mouseY - centerY, 2)
          );
          
          // Store current distance for corruption calculation
          this.currentMouseDistance = distanceFromCenter;
          
          const tolerance = 100;
          const isInCenterZone = distanceFromCenter < tolerance;
          
          const wasVertical = this.isVertical;
          this.isVertical = isInCenterZone;

          // Update UI on distance change (not just zone change)
          if (this.isVertical !== wasVertical || Math.abs(this.lastDistance - distanceFromCenter) > 10) {
            this.lastDistance = distanceFromCenter;
            this.updateUI();
          }
        });
        
        this.statusElement.innerHTML = 'Desktop mode: Move mouse to simulate signal alignment';
        // Initialize distance tracking
        this.currentMouseDistance = 500; // Start far from center
        this.lastDistance = 500;
        // Show the message for desktop mode
        this.updateUI();
      }

      updateUI() {
        const screenInterference = document.getElementById('screenInterference');
        const blackoutOverlay = document.getElementById('blackoutOverlay');
        const pixelationOverlay = document.getElementById('pixelationOverlay');
        const horizontalGlitch = document.getElementById('horizontalGlitch');
        
        // Only show message if signal is connected
        if (this.signalConnected) {
          this.helloElement.classList.add('visible');
          
          // Calculate corruption intensity based on distance
          const corruptionLevel = this.getCorruptionLevel();
          
          // Remove all corruption classes first
          this.helloElement.classList.remove('glitch', 'signal-clear', 'corruption-light', 'corruption-medium', 'corruption-heavy', 'aligning');
          
          if (this.isVertical) {
            // Signal aligned - clear with subtle interference
            this.helloElement.classList.add('signal-clear');
            this.statusElement.innerHTML = 'Signal locked - Third contact protocol active';
            
            // Remove all interference effects
            if (screenInterference) screenInterference.classList.remove('active');
            if (blackoutOverlay) blackoutOverlay.classList.remove('active');
            if (pixelationOverlay) pixelationOverlay.classList.remove('active');
            if (horizontalGlitch) horizontalGlitch.classList.remove('active');
            
          } else {
            // Apply corruption based on distance
            this.applyCorruptionLevel(corruptionLevel);
            
            // Update status based on corruption level
            switch(corruptionLevel) {
              case 'light':
                this.statusElement.innerHTML = 'Minor interference detected - Fine-tune alignment';
                break;
              case 'medium':
                this.statusElement.innerHTML = 'Signal degradation - Adjust position';
                break;
              case 'heavy':
                this.statusElement.innerHTML = 'Critical interference - Realign immediately';
                break;
              case 'extreme':
                this.statusElement.innerHTML = 'SIGNAL LOST - MAJOR REALIGNMENT REQUIRED';
                break;
            }
          }
          
          // Add brief alignment animation when transitioning to clear
          if (this.isVertical && this.wasVertical !== this.isVertical) {
            this.helloElement.classList.add('aligning');
            setTimeout(() => {
              if (this.helloElement.classList.contains('aligning')) {
                this.helloElement.classList.remove('aligning');
              }
            }, 1500);
          }
          
          this.wasVertical = this.isVertical;
        } else {
          // Signal not connected yet - hide message
          this.helloElement.classList.remove('visible');
        }
      }
      
      getCorruptionLevel() {
        // For desktop, use mouse distance from center
        if (!this.isMobileDevice()) {
          const distance = this.currentMouseDistance || 0;
          if (distance < 150) return 'light';
          if (distance < 300) return 'medium';
          if (distance < 500) return 'heavy';
          return 'extreme';
        }
        
        // For mobile, use orientation deviation
        const deviation = this.currentOrientationDeviation || 0;
        if (deviation < 25) return 'light';
        if (deviation < 50) return 'medium';
        if (deviation < 100) return 'heavy';
        return 'extreme';
      }
      
      applyCorruptionLevel(level) {
        const screenInterference = document.getElementById('screenInterference');
        const blackoutOverlay = document.getElementById('blackoutOverlay');
        const pixelationOverlay = document.getElementById('pixelationOverlay');
        const horizontalGlitch = document.getElementById('horizontalGlitch');
        
        // Apply text corruption class
        this.helloElement.classList.add(`corruption-${level}`);
        
        // Apply overlay effects based on corruption level
        switch(level) {
          case 'light':
            // Minimal effects
            if (screenInterference) screenInterference.classList.remove('active');
            if (blackoutOverlay) blackoutOverlay.classList.remove('active');
            if (pixelationOverlay) pixelationOverlay.classList.remove('active');
            if (horizontalGlitch) horizontalGlitch.classList.remove('active');
            break;
            
          case 'medium':
            // Light screen interference only
            if (screenInterference) screenInterference.classList.add('active');
            if (blackoutOverlay) blackoutOverlay.classList.remove('active');
            if (pixelationOverlay) pixelationOverlay.classList.remove('active');
            if (horizontalGlitch) horizontalGlitch.classList.remove('active');
            break;
            
          case 'heavy':
            // Screen interference + pixelation
            if (screenInterference) screenInterference.classList.add('active');
            if (blackoutOverlay) blackoutOverlay.classList.remove('active');
            if (pixelationOverlay) pixelationOverlay.classList.add('active');
            if (horizontalGlitch) horizontalGlitch.classList.add('active');
            break;
            
          case 'extreme':
            // All effects - complete chaos
            this.helloElement.classList.remove(`corruption-${level}`);
            this.helloElement.classList.add('glitch');
            if (screenInterference) screenInterference.classList.add('active');
            if (blackoutOverlay) blackoutOverlay.classList.add('active');
            if (pixelationOverlay) pixelationOverlay.classList.add('active');
            if (horizontalGlitch) horizontalGlitch.classList.add('active');
            break;
        }
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      new OrientationDetector();
    });
  </script>
</body>
</html>